fun void println(int8: str) {
	asm#("mov ecx, [esp + 4]  ; Copy the address of the string into eax");
	
	asmlb#(".loop:");
	asm#("cmp dword [ecx], 0  ; Compare the byte at the current address with null terminator");
	asm#("je .done  ; If null terminator is found, exit loop");
	printwrite#();
	asm#("add dword ecx, 4  ; Move to the next byte in the string");
	asm#("jmp .loop  ; Repeat the loop");
	
	asmlb#(".done:");
}

fun void memcpy(int32: from, int32: to, int32 length) {
	asm#("mov ecx, [esp + 4]  ; Length");
	asm#("mov edi, [esp + 8]  ; To");
	asm#("mov esi, [esp + 12]  ; From");
	
	asmlb#(".copy_loop:");
	asm#("mov eax, [esi]");
	asm#("mov [edi], eax");
	asm#("add esi, 4");
	asm#("add edi, 4");
	asm#("loop .copy_loop");
}

fun int16 strlen(int8: str) {
	asm#("mov eax, [esp + 4]  ; Copy the address of the string into eax");
	asm#("xor ecx, ecx  ; Clear ecx (counter register)");
	
	asmlb#(".loop:");
	asm#("cmp dword [eax], 0  ; Compare the byte at the current address with null terminator");
	asm#("je .done  ; If null terminator is found, exit loop");
	asm#("add dword eax, 4  ; Move to the next byte in the string");
	asm#("inc ecx  ; Increment the counter");
	asm#("jmp .loop  ; Repeat the loop");
	
	asmlb#(".done:");
	
	let int16 length = 0;
	
	asm#("mov [esp], ecx  ; Move strlen to var");
	
	return int16 length;
}

- - - -

import none;

// :IDENT -> value to pointer
// &IDENT -> pointer to value
// var: IDENT -> pointer variable
// var IDENT -> value variable

#def MAX_STRING_SIZE 0xFFFF

struct String {
	var16 size;
	var8: start;
	
	define(var8: start) (.start = start) {
		size = stringSize(start);
	}
	
	operator +(String s2) {
		String s3;
		
		var8: start3 = malloc(size+s2.size);
		
		for(var16 i1; i1 < .size; i1++) {
			&(start3+i1) = &(.start+i1);
		}
		for(var16 i2; i2 < s2.size; i2++) {
			&(start3+.size+i2) = &(s2.start+i2);
		}
		
		mfree(start);
		#destroy(.);
		mfree(s2.start);
		#destroy(s2);
		
		s3 = String {:start3};
		return s3;
	}
}

var16 stringSize(var8: start) {
	var16 index = 0;
	while(&(start+index) != '\0' && index < MAX_STRING_SIZE) {
		index++;
	}else if(index == MAX_STRING_SIZE-1) {
		return -1;
	}
	return index;
}

var64_s main() {
	String string = String {:"Hello World!\0"};
	return (var16->var64_s) string.size;
}