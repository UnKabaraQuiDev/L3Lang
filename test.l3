fun void println(int8: str) {
	asm#("mov ecx, [esp + 4]  ; Copy the address of the string into eax");
	
	asmlb#(".loop:");
	asm#("cmp dword [ecx], 0  ; Compare the byte at the current address with null terminator");
	asm#("je .done  ; If null terminator is found, exit loop");
	printwrite#();
	asm#("add dword ecx, 4  ; Move to the next byte in the string");
	asm#("jmp .loop  ; Repeat the loop");
	
	asmlb#(".done:");
	asm#("mov byte [ecx], 10  ; Newline");
	printwrite#();
}

fun void memcpy(int32: from, int32: to, int32 length) {
	asm#("mov ecx, [esp + 4]  ; Length");
	asm#("mov edi, [esp + 8]  ; To");
	asm#("mov esi, [esp + 12]  ; From");
	
	asmlb#(".copy_loop:");
	asm#("mov eax, [esi]");
	asm#("mov [edi], eax");
	asm#("add esi, 4");
	asm#("add edi, 4");
	asm#("loop .copy_loop");
}

fun int16 strlen(int8: str) {
	asm#("mov eax, [esp + 4]  ; Copy the address of the string into eax");
	asm#("xor ecx, ecx  ; Clear ecx (counter register)");
	
	asmlb#(".loop:");
	asm#("cmp dword [eax], 0  ; Compare the byte at the current address with null terminator");
	asm#("je .done  ; If null terminator is found, exit loop");
	asm#("add dword eax, 4  ; Move to the next byte in the string");
	asm#("inc ecx  ; Increment the counter");
	asm#("jmp .loop  ; Repeat the loop");
	
	asmlb#(".done:");
	
	let int16 length = 0;
	
	asm#("mov [esp], ecx  ; Move strlen to var");
	
	return int16 length;
}

fun int test() {
	let int te = 10;
	return int te;
}

fun int main() {
	println("str");
	println("str1");
	
	if(1-1) {
		println("str2");
	}
	if(0)
		println("str3");
	else {
		println("str4");
	}
	
	return int 1;
}