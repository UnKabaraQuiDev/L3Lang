fun void println(int8: str) {
	asm#("mov ecx, [esp + 4]  ; Copy the address of the string into eax");
	
	asmlb#(".loop:");
	asm#("cmp dword [ecx], 0  ; Compare the byte at the current address with null terminator");
	asm#("je .done  ; If null terminator is found, exit loop");
	printwrite#();
	asm#("add dword ecx, 4  ; Move to the next byte in the string");
	asm#("jmp .loop  ; Repeat the loop");
	
	asmlb#(".done:");
	asm#("sub esp, 4");
	asm#("mov ecx, esp");
	asm#("mov dword [ecx], 10  ; Newline");
	printwrite#();
	asm#("add esp, 4");
}

fun void println(int16 number) {
	break#("println");
	let int8: str = new int8[2]; // 10 digits + null-terminator
	
	stringify(number, str);
	
	break#("println2");
	
	println(str);
}

fun void stringify(int16 number, int8: str) {
	break#("stringify");

	asm#("lea esi, [esp + 8]  ; Load address of the number");
	asm#("mov edi, [esp + 4]  ; Load address of the string");
	// asm#("mov edi, [edi]");
	
	asmlb#(".convert_loop:");
	asm#("mov eax, dword [esi]  ; Load the 32-bit number");
	asm#("mov edx, 0  ; Clear EDX for division");
	asm#("mov ecx, 10  ; Set divisor to 10");
	asm#("div ecx  ; Divide EAX by 10");
	
	asm#("add dl, '0'  ; Convert remainder to ASCII");
	asm#("mov [edi], dl  ; Store ASCII digit in buffer");
	asm#("add edi, 4  ; Move buffer pointer back");
	asm#("test eax, eax  ; Check if quotient is zero");
	asm#("jnz .convert_loop  ; If not, continue conversion");
}

fun void memcpy(int32: from, int32: to, int32 length) {
	asm#("mov ecx, [esp + 4]  ; Length");
	asm#("mov edi, [esp + 8]  ; To");
	asm#("mov esi, [esp + 12]  ; From");
	
	asmlb#(".copy_loop:");
	asm#("mov eax, [esi]");
	asm#("mov [edi], eax");
	asm#("add esi, 4");
	asm#("add edi, 4");
	asm#("loop .copy_loop");
}

fun int16 strlen(int8: str) {
	asm#("mov eax, [esp + 4]  ; Copy the address of the string into eax");
	asm#("xor ecx, ecx  ; Clear ecx (counter register)");
	
	asmlb#(".loop:");
	asm#("cmp dword [eax], 0  ; Compare the byte at the current address with null terminator");
	asm#("je .done  ; If null terminator is found, exit loop");
	asm#("add dword eax, 4  ; Move to the next byte in the string");
	asm#("inc ecx  ; Increment the counter");
	asm#("jmp .loop  ; Repeat the loop");
	
	asmlb#(".done:");
	
	let int16 length = 0;
	
	asm#("mov [esp], ecx  ; Move strlen to var");
	
	return int16 length;
}

fun int test() {
	println("test1");
	return int 0;
}

fun int test(int x) {
	println("test2");
	return int 0;
}

fun int main() {
	let int16 a = 2;
	
	break#("stop1");
	
	println(a);

	break#("stop");
	
	println("sss");
	
	return int a;
}
